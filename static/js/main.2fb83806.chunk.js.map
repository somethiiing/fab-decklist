{"version":3,"sources":["helpers/decklistParser.js","resources/fab_cc_decklist 1.2.pdf","helpers/formFiller.js","resources/text.js","App.js","reportWebVitals.js","index.js"],"names":["equipmentParser","eqp","replace","split","map","el","trim","handlePitchValue","decklist","result","red","yellow","blue","e","filter","undefined","forEach","card","cost","slice","includes","push","handleAmount","list","sort","a","b","decklistObj","fetch","emptySheet","then","res","arrayBuffer","bytes","PDFDocument","load","doc","form","getForm","fullName","gemId","pronoun","date","event","hero","getTextField","setText","eqpTotal","fillSection","redTotal","yellowTotal","blueTotal","grandTotal","String","save","section","total","i","Number","length","App","props","state","nameField","gemIdField","pronounField","dateField","eventField","heroField","eqpField","decklistField","parsed","pdfSrc","showData","handleFieldOnChange","bind","handleSubmit","fillTestData","generateDecklist","toggleShowData","field","this","setState","target","value","Object","assign","decklistParser","fillForm","pdfBytes","file","Blob","type","fileURL","URL","createObjectURL","catch","err","console","log","src","emptyForm","window","className","for","placeholder","onChange","onClick","id","name","height","width","href","download","JSON","stringify","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fb83806.chunk.js","sourcesContent":["export const equipmentParser = (eqp) => {\n  return eqp\n    .replace(/,/g, '\\n')\n    .split('\\n')\n    .map(el => el.trim())\n    .map(el => ['', el]);\n}\n\nexport const decklistParser = (decklist) => {\n  let result = handlePitchValue(decklist);\n\n  result.red = handleAmount(result.red);\n  result.yellow = handleAmount(result.yellow);\n  result.blue = handleAmount(result.blue);\n\n  return result;\n}\n\n\nconst handlePitchValue = (decklist) => {\n  let result = {\n    red: [],\n    yellow: [],\n    blue: []\n  };\n\n  decklist.split('\\n').map(e => e.trim()).filter(e => e !== undefined && e[0] !== '#').forEach(card => {\n    let cost = card.slice(-8);\n    if(cost.includes('red') || cost.includes('1')) {\n      result.red.push(card.replace(/\\(red\\)$/, '').replace(/\\(1\\)$/, ''));\n    }\n    if(cost.includes('yellow') || cost.includes('2')) {\n      result.yellow.push(card.replace(/\\(yellow\\)$/, '').replace(/\\(2\\)$/, ''));\n    }\n    if(cost.includes('blue') || cost.includes('3')) {\n      result.blue.push(card.replace(/\\(blue\\)$/, '').replace(/\\(3\\)$/, ''));\n    }\n  });\n\n  return result;\n};\n\nconst handleAmount = (list) => {\n  return list.map(card => {\n    if (card.includes(1)) return [1, card.replace(/\\(1\\)/, '').replace(/1 x/, '').trim()];\n    if (card.includes(2)) return [2, card.replace(/\\(2\\)/, '').replace(/2 x/, '').trim()];\n    if (card.includes(3)) return [3, card.replace(/\\(3\\)/, '').replace(/3 x/, '').trim()];\n  }).sort((a, b) => a[1] < b[1] ? -1 : 1);\n};\n","export default __webpack_public_path__ + \"static/media/fab_cc_decklist 1.2.c2521910.pdf\";","import { PDFDocument } from 'pdf-lib';\n\nimport emptySheet from '../resources/fab_cc_decklist 1.2.pdf';\n\n/**\n  DECKLIST OBJ:\n    fullName: string\n    gemId: string\n    pronoun: string\n    date: string\n    event: string\n    hero: string\n    eqp: [string, string, string]\n    red: [\n      [number, string]\n    ]\n    yellow: []\n    blue: []\n*/\n\nexport async function fillForm(decklistObj) {\n  const bytes = await fetch(emptySheet).then(res => res.arrayBuffer());\n  const doc = await PDFDocument.load(bytes);\n  const form = doc.getForm();\n\n  const {\n    fullName,\n    gemId,\n    pronoun,\n    date,\n    event,\n    hero,\n  } = decklistObj;\n\n  form.getTextField('Full Name').setText(fullName);\n  form.getTextField('GEM ID').setText(gemId);\n  form.getTextField('Pronoun').setText(pronoun);\n  form.getTextField('Date').setText(date);\n  form.getTextField('Event').setText(event);\n  form.getTextField('Hero').setText(hero);\n\n  let eqpTotal = fillSection('eqp', doc, decklistObj);\n  let redTotal = fillSection('red', doc, decklistObj);\n  let yellowTotal = fillSection('yellow', doc, decklistObj);\n  let blueTotal = fillSection('blue', doc, decklistObj);\n\n  let grandTotal = eqpTotal + redTotal + yellowTotal + blueTotal;\n  form.getTextField('grand-total').setText(String(grandTotal))\n\n  // await logData(form);\n  return await doc.save();\n}\n\nconst fillSection = (section, doc, decklist) => {\n  // eqp, red, yellow, blue\n  const form = doc.getForm();\n  let total = 0;\n\n  decklist[section].forEach( (el, i) => {\n    total = total + Number(el[0]);\n    form.getTextField(`${section}-count-${i + 1}`).setText(String(el[0]));\n    form.getTextField(`${section}-card-${i + 1}`).setText(el[1]);\n  });\n\n  total = section === 'eqp' ? decklist[section].length : total;\n  form.getTextField(`${section}-total`).setText(String(total));\n\n  return total\n}\n\nconst logData = (form) => {\n  const fields = form.getFields();\n  fields.forEach(field => {\n    const name = field.getName();\n    const text = field.getText();\n    console.log(name, ': ', text);\n  })\n}","const eqp = `Equipment/Weapons.\nList one card on each line OR comma separated.\n\nExample:\nHarmonized Kodachi\nHarmonized Kodachi\nMask of Momentum\nFyendal's Spring Tunic\nBreaking Scales\nNullrune Boots\nSnapdragon Scalers\n`;\n\nconst deck = `Decklist.\nOne card on each line.\n\nExamples:\n2 x Flik Flak (red)\n2 x Flik Flak (1)\n(2) Flik Flak (red)\n(2) Flik Flak (1)\n`;\n\nexport default {\n  eqp,\n  deck\n}","import React from 'react';\n\nimport { equipmentParser, decklistParser } from './helpers/decklistParser';\nimport { fillForm } from './helpers/formFiller';\nimport placeholder from './resources/text';\n\nimport './App.css';\n\nimport emptyForm from './resources/fab_cc_decklist 1.2.pdf';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nameField: '',\n      gemIdField: '',\n      pronounField: '',\n      dateField: '',\n      eventField: '',\n      heroField: '',\n      eqpField: '',\n      decklistField: '',\n      parsed: {\n        eqp: [],\n        red: [],\n        yellow: [],\n        blue: []\n      },\n      pdfSrc: '',\n      showData: false\n    }\n\n    this.handleFieldOnChange = this.handleFieldOnChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fillTestData = this.fillTestData.bind(this);\n    this.generateDecklist = this.generateDecklist.bind(this);\n    this.toggleShowData = this.toggleShowData.bind(this);\n  }\n\n  handleFieldOnChange(e, field) {\n    this.setState({[field]: e.target.value})\n  }\n\n  handleSubmit() {\n    let {\n      nameField,\n      gemIdField,\n      pronounField,\n      dateField,\n      eventField,\n      heroField,\n      eqpField,\n      decklistField\n    } = this.state;\n\n    let result = Object.assign({}, decklistParser(decklistField), {\n      fullName: nameField,\n      gemId: gemIdField,\n      pronoun: pronounField,\n      date: dateField,\n      event: eventField,\n      hero: heroField,\n      eqp: equipmentParser(eqpField)\n    });\n\n    this.generateDecklist(result);\n\n    this.setState({parsed: result});\n  }\n\n  generateDecklist(decklistObj) {\n    fillForm(decklistObj)\n      .then( pdfBytes => {\n        let file = new Blob([pdfBytes], { type: 'application/pdf' });\n        var fileURL = URL.createObjectURL(file);\n        this.setState({pdfSrc: fileURL});\n        // window.open(fileURL)\n      })\n      .catch(err => console.log(err));\n  }\n\n  toggleShowData() {\n    let { showData } = this.state;\n    this.setState({showData: !showData})\n  }\n\n  fillTestData() {\n    this.setState({\n      nameField: 'wilson',\n      gemIdField: '123123',\n      pronounField: 'he/him/her',\n      dateField: '12/25/2015',\n      eventField: 'fake event',\n      heroField: 'Oldhim, Grandfather of Eternity',\n      eqpField: 'Crater Fist, Crown of Seeds, Fyendal\\'s Spring Tunic, Heart of Ice, Ironhide Legs, Nullrune Gloves, Nullrune Hood, Rampart of the Ram\\'s Head,Winter\\'s Wail',\n      decklistField: `\n  (3) Command and Conquer (red)\n  (3) Endless Winter (red)\n  (3) Fate Foreseen (red)\n  (3) Oaken Old (red)\n  (3) Pummel (red)\n  (3) Sigil of Solace (red)\n  (3) Sink Below (red)\n  (3) Spinal Crush (red)\n  (3) Art of War (yellow)\n  (3) Forged for War (yellow)\n  (2) Remembrance (yellow)\n  (3) Autumn's Touch (blue)\n  (3) Blizzard (blue)\n  (3) Channel Lake Frigid (blue)\n  (3) Cranial Crush (blue)\n  (3) Disable (blue)\n  (2) Exposed to the Elements (blue)\n  (3) Glacial Footsteps (blue)\n  (3) Last Ditch Effort (blue)\n  (1) Pulse of Isenloft (blue)\n  (3) Rouse the Ancients (blue)\n  (3) Sow Tomorrow (blue)\n  (3) Staunch Response (blue)\n  (3) Winter's Bite (blue)\n  (3) Winter's Grasp (blue)\n      `\n    });\n  }\n\n  render() {\n    let { pdfSrc, showData, heroField } = this.state;\n    let src = pdfSrc !== '' ? pdfSrc : emptyForm;\n\n    window.fillTestData = () => this.fillTestData();\n    window.toggleShowData = () => this.toggleShowData();\n\n    return (\n      <div className='wrapper'>\n        <div className=\"app\">\n          <div className='leftCol'>\n            <h2 className='sectionHeader'>Personal Information</h2>\n            <label className='section' for='fullName'>\n              <span className='label'>Full Name:</span>\n              <input\n                className='field'\n                value={this.state.nameField}\n                placeholder='Full Name'\n                onChange={e => this.handleFieldOnChange(e, 'nameField')}\n              />\n            </label>\n            <label className='section' for='gemId'>\n              <span className='label'>GEM ID:</span>\n              <input\n                className='field'\n                value={this.state.gemIdField}\n                placeholder='GEM ID'\n                onChange={e => this.handleFieldOnChange(e, 'gemIdField')}\n              />\n            </label>\n            <label className='section' for='pronoun'>\n              <span className='label'>Pronouns:</span>\n              <input\n                className='field'\n                value={this.state.pronounField}\n                placeholder='Pronoun(s)'\n                onChange={e => this.handleFieldOnChange(e, 'pronounField')}\n              />\n            </label>\n\n            <h2 className='sectionHeader'>Event Information</h2>\n            <label className='section' for='date'>\n              <span className='label'>Date:</span>\n              <input\n                className='field'\n                value={this.state.dateField}\n                placeholder='Date'\n                onChange={e => this.handleFieldOnChange(e, 'dateField')}\n              />\n            </label>\n            <label className='section' for='event'>\n              <span className='label'>Event:</span>\n              <input\n                className='field'\n                value={this.state.eventField}\n                placeholder='Event'\n                onChange={e => this.handleFieldOnChange(e, 'eventField')}\n              />\n            </label>\n\n            <h2 className='sectionHeader'>Deck Information</h2>\n            <label className='section' for='hero'>\n              <span className='label'>Hero:</span>\n              <input\n                className='field'\n                value={this.state.heroField}\n                placeholder='Hero'\n                onChange={e => this.handleFieldOnChange(e, 'heroField')}\n              />\n            </label>\n            <label className='section' for='equipment'>\n              <span className='label'>Equipment:</span>\n              <textarea\n                className='equipment field'\n                value={this.state.eqpField}\n                placeholder={placeholder.eqp}\n                onChange={e => this.handleFieldOnChange(e, 'eqpField')}\n              />\n            </label>\n            <label className='section' for='decklist'>\n              <span className='label'>Decklist:</span>\n              <textarea\n                className='decklist field'\n                value={this.state.decklistField}\n                placeholder={placeholder.deck}\n                onChange={e => this.handleFieldOnChange(e, 'decklistField')} />\n            </label>\n\n            <button className='button' onClick={this.handleSubmit}>Generate Decklist</button>\n\n          </div>\n\n          <div className='rightCol'>\n            <h2 className='sectionHeader'>Preview: </h2>\n            <div className='previewContainer'>\n              <iframe className='preview' id='decklist' name='decklist' height='665' width='440' type=\"application/pdf\" src={src} />\n              <a className='button' href={src} download={`${heroField} - decklist`}>Download Decklist</a>\n            </div>\n            { showData && <>\n                <h2 className='sectionHeader'>State: </h2>\n                <pre>\n                  {JSON.stringify(this.state, null, 4)}\n                </pre>\n              </>}\n          </div>\n        </div>\n        <div className='footer'>\n            Flesh and Blood Decklist Generator by <a href='http://wilsonyu.io'>Wilson Yu</a>. Please send feedback, or report issues direactly via <a href='https://github.com/somethiiing/fab-decklist'>Github</a>.\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}